name: Node

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - 'feature/**'
      - 'plugin/**'
      - 'v2oss'
    tags:
      - '**'

jobs:
  build-plugin-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Prepare signing certs
        shell: bash
        env:
          SIGNING_CERT_BASE64: ${{ secrets.SIGNING_CERT_BASE64 }}
          SIGNING_CERT_PASSWORD: ${{ secrets.SIGNING_CERT_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH="$RUNNER_TEMP/sign_certificate.p12"
          KEYCHAIN_PATH="$RUNNER_TEMP/app-signing.keychain-db"

          # import certificate and provisioning profile from secrets
          echo -n "$SIGNING_CERT_BASE64" | base64 --decode --output "$CERTIFICATE_PATH"

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # import certificate to keychain
          security import "$CERTIFICATE_PATH" -P "$SIGNING_CERT_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
          security list-keychain -d user -s "$KEYCHAIN_PATH"

      - name: Build MacOS
        shell: bash
        env:
          BUILD_PLUGIN: true
          NOTARIZATION_PASSWORD: ${{ secrets.NOTARIZATION_PASSWORD }}
        run: |
          set -x
          set -e

          # Build the PDK
          mkdir -p ./build/macos/pdk/
          pushd ./build/macos/pdk/
          cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=./out/ \
            -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=10.11 \
            -DBENCHMARK_ENABLE_GTEST_TESTS=OFF \
            ../../..

          cmake --build . -j 8
          popd

          # Install
          cmake --install ./build/macos/pdk/ --component plugin --strip

          # Sign and notarize
          ./scripts/sign.sh "audio.elementary.plugindevkit" build/macos/pdk/out/Release/*.{vst3,component}

      - name: Archive PDK
        uses: actions/upload-artifact@v2
        with:
          name: elementary-plugindevkit-macos-release
          path: build/macos/pdk/out/Release/

  build-plugin-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Build Windows
        shell: bash
        env:
          BUILD_PLUGIN: true
        run: |
          set -x
          set -e

          mkdir -p ./build/windows/
          pushd ./build/windows
          cmake \
            -DCMAKE_INSTALL_PREFIX=./out/ \
            -DBENCHMARK_ENABLE_GTEST_TESTS=Off ../..

          # Not sure why, but the cmake install step seems to break the VST3 bundle structure
          # that cmake produces. It installs only the binary, not the surrounding directories.
          #
          # To avoid that, we just build and pluck the artefacts out of the relevant build dirs.
          cmake --build . --config Release -j 8
          cmake --build . --config Debug -j 8
          popd

      - name: Archive
        uses: actions/upload-artifact@v2
        with:
          name: elementary-plugindevkit-windows-release
          path: build/windows/plugin/next/ElementaryDevKit_artefacts/Release/VST3/

      - name: Archive
        uses: actions/upload-artifact@v2
        with:
          name: elementary-plugindevkit-windows-debug
          path: build/windows/plugin/next/ElementaryDevKit_artefacts/Debug/VST3/

  # See https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts#passing-data-between-jobs-in-a-workflow
  # We use the results of the prior jobs to package the plugin binaries into the @elemaudio/plugin-renderer package on the registry
  build:
    runs-on: ubuntu-latest
    needs:
      - build-plugin-macos
      - build-plugin-windows
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - uses: actions/setup-node@v2
        with:
          node-version: 18.x
          registry-url: 'https://registry.npmjs.org'
          always-auth: true

      - name: Copy macOS plugin binaries
        uses: actions/download-artifact@v3
        with:
          name: elementary-plugindevkit-macos-release
          path: js2/packages/plugin-renderer/binaries/mac/

      - name: Copy Windows plugin binaries
        uses: actions/download-artifact@v3
        with:
          name: elementary-plugindevkit-windows-release
          path: js2/packages/plugin-renderer/binaries/win/

      - name: Remove excess Windows binaries
        shell: bash
        working-directory: ./js2/packages/plugin-renderer/binaries/win/
        run: |
          rm ElementaryDevKit.lib
          rm ElementaryDevKit.exp

      - name: Lerna build and test
        shell: bash
        working-directory: ./js2
        run: |
          lerna bootstrap
          lerna run build
          lerna run test

      - name: Publish
        shell: bash
        working-directory: ./js2
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          ELEM_REGISTRY_TOKEN: ${{ secrets.ELEM_REGISTRY_API_KEY }}
        run: |
          # First, touching up our npmrc for the private registry. This first command ensures
          # that the existing npmrc ends with a new line
          sed -i -e '$a\' "$NPM_CONFIG_USERCONFIG"
          echo '//www.elementary.audio/api/v1/registry/:_authToken=${ELEM_REGISTRY_TOKEN}' >> "$NPM_CONFIG_USERCONFIG"
          cat "$NPM_CONFIG_USERCONFIG"

          # See https://github.com/lerna/lerna/issues/2788 for --no-verify-access reasoning
          #
          # Also, note that Github will not trigger a workflow event for tags in cases where
          # more than three tags are pushed at once:
          # See https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#push
          #
          # Therefore we run lerna publish on every build, and set fetch-depth: 0 for the checkout
          # step in this job which will collect all tags. Lerna will then find them and publish if
          # they're there, else skip.
          lerna publish from-git --yes --no-verify-access
